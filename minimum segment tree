//segment tree 
//ind 2*ind+1 2*ind+2
void build(int ind,int low,int high,vector<int>&arr,vector<int>&seg) {
if(low==high) {
    seg[ind]=arr[low];
    return;
}
int mid = (low+high)/2;
build(2*ind+1,low,mid,arr,seg);
build(2*ind+2,mid+1,high,arr,seg);
seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);


}
int query(int ind,int low,int high,int l,int r,vector<int>&seg) {
//no overlap between
// l r low high or low high l r
if(r<low || high<l) return INT_MAX;
//complete overlap between
//l low high r
if(low>=l && high<=r) {
    return seg[ind];
}
int mid = (low+high)>>1;

int left = query(2*ind+1,low,mid,l,r,seg);
int right = query(2*ind+2,mid+1,high,l,r,seg);
return min(left,right);
}


void update(int ind,int low,int high,int i,int val,vector<int>&seg){
    if(low==high) {
        seg[ind]=val;
        return;
    }
    int mid = (low+high)>>1;
    if(i<=mid) {
        update(2*ind+1,low,mid,i,val,seg);

    }else {
        update(2*ind+2,mid+1,high,i,val,seg);
    }
 seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
}
